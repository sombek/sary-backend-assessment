version: '3.9'

services:
  amida-api:
    build:
      context: .
    volumes:
      # Mounts the project directory on the host to /app inside the container,
      # allowing you to modify the code without having to rebuild the image.
      - .:/app
      # Just specify a path and let the Engine create a volume.
      # Data present in the base image at the specified mount point will be copied
      # over to the new volume upon volume initialization.
      # node_modules from this new volume will be used and not from your local dev env.
      - /app/node_modules/

    # Expose ports [HOST:CONTAINER}
    ports:
      - "4000:4000"

    # Set environment variables from this file
    env_file:
      - .env

    # Overwrite any env var defined in .env file (if required)
    environment:
      - NODE_ENV=production
      - API_VERSION=1.0
      - JWT_SECRET=helloworld
      - JWT_AGE=3600
      - REDIS_CONNECTION_STRING=redis://default:sOmE_sEcUrE_pAsS@redis:6379
      - UNIQUE_NAME_PG_DB=api
      - UNIQUE_NAME_PG_PORT=5432
      - UNIQUE_NAME_PG_HOST=amida-db
      - UNIQUE_NAME_PG_USER=api
      - UNIQUE_NAME_PG_PASSWD=boilerplate

    # Link to containers in another service.
    # Links also express dependency between services in the same way as depends_on,
    # so they determine the order of service startup.
    links:
      - amida-db
      - redis

  amida-db:
    image: "postgres:14.1-alpine3.15"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=api
      - POSTGRES_PASSWORD=boilerplate

  redis:
    image: "redis:alpine"
    command: redis-server --requirepass sOmE_sEcUrE_pAsS
    ports:
      - "6379:6379"
    volumes:
      - $PWD/redis-data:/var/lib/redis
      - $PWD/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
